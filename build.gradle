buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

def mod_version = "1.0.0.0"

def mc_version = "1.7.10"

def build_number = System.getenv("DRONE_BUILD_NUMBER")

version = mc_version + "-" + mod_version + ( build_number != null ?("-" + build_number): "")
group = "exter.foundry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Foundry"

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    runDir = "eclipse"
}

repositories {
     maven {
        name "DVS1 Maven FS'"
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven"
    }
}

dependencies {
    compile "mantle:Mantle:${mc_version}-0.3.2.jenkins187:deobf"
    compile "tconstruct:TConstruct:${mc_version}-1.8.2.build880:deobf"
    compile "codechicken:NotEnoughItems:${mc_version}-1.0.5.111:dev"
    compile "codechicken:CodeChickenCore:${mc_version}-1.0.7.46:dev"
    compile "codechicken:CodeChickenLib:${mc_version}-1.1.3.138:dev"
}



processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task apiZip(type: Zip) {
    classifier = 'api'
    from sourceSets*.allSource
    include 'exter/foundry/api/**'
    destinationDir = file 'output'
}


task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier ='dev'
    destinationDir = file 'output'
}

artifacts {
    archives deobfJar
}

jar {
    apiZip.execute()
    destinationDir = file 'output'
}

